//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\zach1\Desktop\School\classes\C#\ConsoleApplication3\ConsoleApplication3\css.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ConsoleApplication3 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class cssParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, GROUP=4, WORD=5, NUMBER=6, WHITESPACE=7;
	public const int
		RULE_expression = 0;
	public static readonly string[] ruleNames = {
		"expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'{'", "'}'", "'Group'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "GROUP", "WORD", "NUMBER", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "css.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public cssParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroupassignContext : ExpressionContext {
		public ITerminalNode GROUP() { return GetToken(cssParser.GROUP, 0); }
		public ITerminalNode[] WORD() { return GetTokens(cssParser.WORD); }
		public ITerminalNode WORD(int i) {
			return GetToken(cssParser.WORD, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GroupassignContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcssListener typedListener = listener as IcssListener;
			if (typedListener != null) typedListener.EnterGroupassign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcssListener typedListener = listener as IcssListener;
			if (typedListener != null) typedListener.ExitGroupassign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcssVisitor<TResult> typedVisitor = visitor as IcssVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupassign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WordContext : ExpressionContext {
		public ITerminalNode WORD() { return GetToken(cssParser.WORD, 0); }
		public WordContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcssListener typedListener = listener as IcssListener;
			if (typedListener != null) typedListener.EnterWord(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcssListener typedListener = listener as IcssListener;
			if (typedListener != null) typedListener.ExitWord(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcssVisitor<TResult> typedVisitor = visitor as IcssVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWord(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CommandContext : ExpressionContext {
		public ITerminalNode[] WORD() { return GetTokens(cssParser.WORD); }
		public ITerminalNode WORD(int i) {
			return GetToken(cssParser.WORD, i);
		}
		public CommandContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcssListener typedListener = listener as IcssListener;
			if (typedListener != null) typedListener.EnterCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcssListener typedListener = listener as IcssListener;
			if (typedListener != null) typedListener.ExitCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcssVisitor<TResult> typedVisitor = visitor as IcssVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_expression);
		int _la;
		try {
			State = 24;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				_localctx = new CommandContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2; Match(WORD);
				State = 4;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 3; Match(WORD);
					}
					}
					State = 6;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==WORD );
				State = 8; Match(T__0);
				}
				break;

			case 2:
				_localctx = new WordContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 9; Match(WORD);
				}
				break;

			case 3:
				_localctx = new GroupassignContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 10; Match(GROUP);
				State = 12;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 11; Match(WORD);
					}
					}
					State = 14;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==WORD );
				State = 16; Match(T__1);
				State = 18;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 17; expression();
					}
					}
					State = 20;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==GROUP || _la==WORD );
				State = 22; Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\t\x1D\x4\x2\t\x2"+
		"\x3\x2\x3\x2\x6\x2\a\n\x2\r\x2\xE\x2\b\x3\x2\x3\x2\x3\x2\x3\x2\x6\x2\xF"+
		"\n\x2\r\x2\xE\x2\x10\x3\x2\x3\x2\x6\x2\x15\n\x2\r\x2\xE\x2\x16\x3\x2\x3"+
		"\x2\x5\x2\x1B\n\x2\x3\x2\x2\x2\x2\x3\x2\x2\x2\x2 \x2\x1A\x3\x2\x2\x2\x4"+
		"\x6\a\a\x2\x2\x5\a\a\a\x2\x2\x6\x5\x3\x2\x2\x2\a\b\x3\x2\x2\x2\b\x6\x3"+
		"\x2\x2\x2\b\t\x3\x2\x2\x2\t\n\x3\x2\x2\x2\n\x1B\a\x3\x2\x2\v\x1B\a\a\x2"+
		"\x2\f\xE\a\x6\x2\x2\r\xF\a\a\x2\x2\xE\r\x3\x2\x2\x2\xF\x10\x3\x2\x2\x2"+
		"\x10\xE\x3\x2\x2\x2\x10\x11\x3\x2\x2\x2\x11\x12\x3\x2\x2\x2\x12\x14\a"+
		"\x4\x2\x2\x13\x15\x5\x2\x2\x2\x14\x13\x3\x2\x2\x2\x15\x16\x3\x2\x2\x2"+
		"\x16\x14\x3\x2\x2\x2\x16\x17\x3\x2\x2\x2\x17\x18\x3\x2\x2\x2\x18\x19\a"+
		"\x5\x2\x2\x19\x1B\x3\x2\x2\x2\x1A\x4\x3\x2\x2\x2\x1A\v\x3\x2\x2\x2\x1A"+
		"\f\x3\x2\x2\x2\x1B\x3\x3\x2\x2\x2\x6\b\x10\x16\x1A";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ConsoleApplication3
